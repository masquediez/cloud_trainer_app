name: Terraform and Ansible Workflow

on:
  push:
    branches:
      - main

jobs:
  terraform-vpc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: actions-Ansible # Apunta a la rama correcta

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform_setup/VPC

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform_setup/VPC

  terraform-ec2:
    runs-on: ubuntu-latest
    needs: terraform-vpc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: actions-Ansible # Apunta a la rama correcta

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform_setup/EC2

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform_setup/EC2

      - name: Show Terraform Output
        id: terraform_output
        run: terraform output -json
        working-directory: ./terraform_setup/EC2

      - name: Extract IP addresses
        id: extract_ip
        run: |
          INSTANCE_IPS=$(echo '${{ steps.terraform_output.outputs.instance_ip }}' | jq -r '.[]')
          echo "INSTANCE_IPS=$INSTANCE_IPS" >> $GITHUB_ENV
        working-directory: ./terraform_setup/EC2

  ansible-deploy:
    runs-on: ubuntu-latest
    needs: terraform-ec2
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add SSH Key
        run: |
          echo "${{ secrets.AWS_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Create hosts.ini dynamically
        run: |
          echo "[nginx]" > ansible/hosts.ini
          echo "nginx ansible_host=${{ env.NGINX_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=private_key.pem" >> ansible/hosts.ini
          echo "[httpd]" >> ansible/hosts.ini
          echo "httpd ansible_host=${{ env.HTTPD_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=private_key.pem" >> ansible/hosts.ini

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Run Ansible Playbook
        run: |
          ansible-playbook ansible_workflow/playbook.yml -i ansible/hosts.ini -u ubuntu --private-key private_key.pem
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"

      - name: Clean up
        run: rm -f private_key.pem
